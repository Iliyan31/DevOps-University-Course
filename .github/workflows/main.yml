name: Assignment number One DevOps University Course
on:
  push:
    branches: [ main ]
#env:
  #  docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
  #  docker_password: ${{ secrets.DOCKERHUB_TOKEN }}
jobs:
  Flake8-Python3-Check:
    name: Flake8 python scan
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.12'
          architecture: x64

      - name: Checkout PyTorch
        uses: actions/checkout@v3

      - name: Install flake8
        run: pip install flake8

      - name: Run flake8
        uses: suo/flake8-github-action@releases/v1
        with:
          checkName: 'flake8_py3'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Markdown-Cli-Lint-Check:
    name: Markdown CLI check 
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Lint changelog file
      uses: avto-dev/markdown-lint@v1
      with:
        rules: '/lint/rules/changelog.js'
        config: '/lint/config/changelog.yml'
        args: './CHANGELOG.md'

  Editorconfig:
    name: Run editorconfig scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Editorconfig Checker action
      uses: editorconfig-checker/action-editorconfig-checker@main

    - name: Editorconfig checker
      run: editorconfig-checker

  Git-Leaks-Scan:
    name: Git leaks scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Python-Unittests:
    name: Run python unittests
    runs-on: ubuntu-latest
    needs: [ Flake8-Python3-Check, Markdown-Cli-Lint-Check, Editorconfig, Git-Leaks-Scan ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: pip3 install -r src/requirements.txt

      - name: Run unit tests
        run: python3 -m unittest src/app_test.py

  Snyk-Code-Scan:
    name: Snyk can for vulnerabilities
    runs-on: ubuntu-latest
    needs: [ Python-Unittests ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run snyk scan
        working-directory: ${{github.workspace}}/src
        run: |
            pip3 install -r requirements.txt
            npm install snyk -g
            snyk auth ${{ secrets.SNYK_TOKEN }}
            snyk test

  Sonarcloud-Code-Scan:
    name: SonarCloud scan
    runs-on: ubuntu-latest
    needs: [ Python-Unittests ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Clone-down:
  #   name: Clone down repo
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout new repository
  #     uses: actions/checkout@v3
  #   - name: Upload the new repository
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: code
  #       path: .

  Trivy-Scan-And-Build:
    name: Trivy scan
    runs-on: ubuntu-latest
    needs: [ Snyk-Code-Scan, Sonarcloud-Code-Scan ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build docker image
      run: docker build -t assignmentdevops ./src

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKERHUB_USERNAME }}/assignmentdevops'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  Publish-Docker-image:
    name: Publish the docker image
    runs-on: ubuntu-latest
    needs: Trivy-Scan-And-Build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build docker image
        run: docker build -t assignmentdevops ./src

      - name: Add tag to docker image
        run: docker tag assignmentdevops ${{ secrets.DOCKERHUB_USERNAME }}/assignmentdevops

      - name: Publish to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/assignmentdevops
